package com.zhangmiao.notepad.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhangmiao.notepad.bean.RecordDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "RECORD_DATA_BEAN".
 */
public class RecordDataBeanDao extends AbstractDao<RecordDataBean, String> {

    public static final String TABLENAME = "RECORD_DATA_BEAN";

    /**
     * Properties of entity RecordDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TYPE_MAIN = new Property(0, int.class, "TYPE_MAIN", false, "TYPE__MAIN");
        public final static Property TYPE_MOOD = new Property(1, int.class, "TYPE_MOOD", false, "TYPE__MOOD");
        public final static Property TYPE_NOTE = new Property(2, int.class, "TYPE_NOTE", false, "TYPE__NOTE");
        public final static Property Id = new Property(3, String.class, "id", true, "ID");
        public final static Property Date = new Property(4, long.class, "date", false, "DATE");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        public final static Property IsLock = new Property(7, boolean.class, "isLock", false, "IS_LOCK");
        public final static Property Type = new Property(8, int.class, "type", false, "TYPE");
    }

    ;


    public RecordDataBeanDao(DaoConfig config) {
        super(config);
    }

    public RecordDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_DATA_BEAN\" (" + //
                "\"TYPE__MAIN\" INTEGER NOT NULL ," + // 0: TYPE_MAIN
                "\"TYPE__MOOD\" INTEGER NOT NULL ," + // 1: TYPE_MOOD
                "\"TYPE__NOTE\" INTEGER NOT NULL ," + // 2: TYPE_NOTE
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 3: id
                "\"DATE\" INTEGER NOT NULL UNIQUE ," + // 4: date
                "\"TITLE\" TEXT," + // 5: title
                "\"CONTENT\" TEXT," + // 6: content
                "\"IS_LOCK\" INTEGER NOT NULL ," + // 7: isLock
                "\"TYPE\" INTEGER NOT NULL );"); // 8: type
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordDataBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTYPE_MAIN());
        stmt.bindLong(2, entity.getTYPE_MOOD());
        stmt.bindLong(3, entity.getTYPE_NOTE());

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getDate());

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getIsLock() ? 1L : 0L);
        stmt.bindLong(9, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordDataBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getTYPE_MAIN());
        stmt.bindLong(2, entity.getTYPE_MOOD());
        stmt.bindLong(3, entity.getTYPE_NOTE());

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(4, id);
        }
        stmt.bindLong(5, entity.getDate());

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }

        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
        stmt.bindLong(8, entity.getIsLock() ? 1L : 0L);
        stmt.bindLong(9, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }

    @Override
    public RecordDataBean readEntity(Cursor cursor, int offset) {
        RecordDataBean entity = new RecordDataBean( //
                cursor.getInt(offset + 0), // TYPE_MAIN
                cursor.getInt(offset + 1), // TYPE_MOOD
                cursor.getInt(offset + 2), // TYPE_NOTE
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // id
                cursor.getLong(offset + 4), // date
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
                cursor.getShort(offset + 7) != 0, // isLock
                cursor.getInt(offset + 8) // type
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, RecordDataBean entity, int offset) {
        entity.setTYPE_MAIN(cursor.getInt(offset + 0));
        entity.setTYPE_MOOD(cursor.getInt(offset + 1));
        entity.setTYPE_NOTE(cursor.getInt(offset + 2));
        entity.setId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDate(cursor.getLong(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsLock(cursor.getShort(offset + 7) != 0);
        entity.setType(cursor.getInt(offset + 8));
    }

    @Override
    protected final String updateKeyAfterInsert(RecordDataBean entity, long rowId) {
        return entity.getId();
    }

    @Override
    public String getKey(RecordDataBean entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
