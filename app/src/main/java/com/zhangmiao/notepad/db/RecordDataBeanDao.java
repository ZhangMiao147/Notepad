package com.zhangmiao.notepad.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhangmiao.notepad.bean.RecordDataBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_DATA_BEAN".
*/
public class RecordDataBeanDao extends AbstractDao<RecordDataBean, String> {

    public static final String TABLENAME = "RECORD_DATA_BEAN";

    /**
     * Properties of entity RecordDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CrateDate = new Property(1, long.class, "crateDate", false, "CRATE_DATE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property UpdateDate = new Property(4, long.class, "updateDate", false, "UPDATE_DATE");
        public final static Property IsWastebasket = new Property(5, boolean.class, "isWastebasket", false, "IS_WASTEBASKET");
    };


    public RecordDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_DATA_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CRATE_DATE\" INTEGER NOT NULL UNIQUE ," + // 1: crateDate
                "\"CONTENT\" TEXT," + // 2: content
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"UPDATE_DATE\" INTEGER NOT NULL ," + // 4: updateDate
                "\"IS_WASTEBASKET\" INTEGER NOT NULL );"); // 5: isWastebasket
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_DATA_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordDataBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCrateDate());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getUpdateDate());
        stmt.bindLong(6, entity.getIsWastebasket() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordDataBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCrateDate());
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
        stmt.bindLong(4, entity.getType());
        stmt.bindLong(5, entity.getUpdateDate());
        stmt.bindLong(6, entity.getIsWastebasket() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RecordDataBean readEntity(Cursor cursor, int offset) {
        RecordDataBean entity = new RecordDataBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getLong(offset + 1), // crateDate
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.getInt(offset + 3), // type
            cursor.getLong(offset + 4), // updateDate
            cursor.getShort(offset + 5) != 0 // isWastebasket
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordDataBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCrateDate(cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setUpdateDate(cursor.getLong(offset + 4));
        entity.setIsWastebasket(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecordDataBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(RecordDataBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
